#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define MAX_SIZE 100001

typedef struct _maxHeap {
	long long heap[MAX_SIZE];
	int heap_size;
}maxHeap;

void initHeap(maxHeap* h) {
	h->heap_size = 0;
}

void insertHeap(maxHeap* h, int num) {
	int i;
	i = ++(h->heap_size);
	while (i != 1 && h->heap[i / 2] < num) {
		h->heap[i] = h->heap[i / 2];
		i /= 2;
	}
	h->heap[i] = num;
}

int deleteHeap(maxHeap* h) {
	if (h->heap_size == 0)
		return 0;
	int parent, child;
	int res = h->heap[1];
	int temp = h->heap[h->heap_size--];
	parent = 1;
	child = 2;
	while (child <= h->heap_size) {
		if (child < h->heap_size &&
			h->heap[child] < h->heap[child + 1])
			child++;
		if (temp < h->heap[child]) {
			h->heap[parent] = h->heap[child];
			parent = child;
			child *= 2;
		}
	}
	h->heap[parent] = temp;
	return res;
}

int main() {
	int n, input;
	maxHeap h;
	initHeap(&h);
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &input);
		if (input == 0) {
			printf("%d\n", deleteHeap(&h));
		}
		else {
			insertHeap(&h, input);
		}
	}
}
